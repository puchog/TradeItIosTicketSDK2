//
//  TradeItConnector.h
//  TradeItIosEmsApi
//
//  Created by Antonio Reyes on 1/12/16.
//  Copyright Â© 2016 TradeIt. All rights reserved.
//

#import <Foundation/Foundation.h>

#import "TradeItTypeDefs.h"
#import "TradeItAuthenticationInfo.h"
#import "TradeItResult.h"
#import "TradeItAuthLinkResult.h"
#import "TradeItUpdateLinkResult.h"
#import "TradeItLinkedLogin.h"
#import "TradeItBroker.h"

/**
   Main class to manage the connection settings to the Trade It Execution Management System (EMS). And the account linking and storing of the userToken used for establishing the session
 */
@interface TradeItConnector : NSObject

/**
 *  The apiKey is generated by TradeIt and unique to your application and is required for all API requests
 */
@property NSString * _Nullable apiKey;

/**
 *  Environment to send the request to. Default value is TradeItEmsProductionEnv
 *  Tokens and API Keys are specific to environment
 */
@property TradeitEmsEnvironments environment;

/**
 *  API version to use.  Defaults to the latest.
 */
@property TradeItEmsApiVersion version;

- (nonnull id)initWithApiKey:(nonnull NSString *)apiKey;

- (nonnull id)initWithApiKey:(nonnull NSString *)apiKey
                 environment:(TradeitEmsEnvironments)environment
                     version:(TradeItEmsApiVersion)version;

/**
 *  Return an array with all the brokers that support stockOrEtfTrading and are enabled for a given apiKey
 *
 *  @param completionBlock Completion callback that accepts an array of TradeItBroker objects, where each object has a "longName" and "shortName". The longName should be displayed to the user and the short name should be used when sending a request to the ems server.
 */
- (void)getAvailableBrokersWithCompletionBlock:(void (^ _Nullable)(NSArray<TradeItBroker *> * _Nullable))completionBlock;

/**
 *  A user oAuth token is generated given credentials for a broker. The token may be used to authenticate the user in the future without them having to re-enter their credentials.
 * **** This token should be treated and stored like a password.  *****
 *  It's recommended to use the saveLinkToKeychain method to hold onto the token, and use either touchId or a short password like a 4 digit pen before retrieving the token for the user
 *
 *  @param authenticationInfo A populated TradeItAuthenticationInfo with the username and password
 *  @param completionBlock Completion callback that accepts a TradeItResult with the successful or failed response for authentication.
 */
- (void)linkBrokerWithAuthenticationInfo:(TradeItAuthenticationInfo * _Nullable)authenticationInfo
                      andCompletionBlock:(void (^ _Nullable)(TradeItResult * _Nullable))completionBlock;

/**
 *  If the oAuth token becomes stale, we can issue a new token by the previous linked login. This will replace the occurrence, if any, in the keychain/userprofile.  If it was never previously saved, it will be created.
 *
 *  @param completionBlock Completion callback that accepts a TradeItResult with the successful or failed response for authentication.
 */
- (void)updateUserToken:(TradeItLinkedLogin * _Nullable)linkedLogin
               authInfo:(TradeItAuthenticationInfo * _Nullable)authInfo
     andCompletionBlock:(void (^ _Nullable)(TradeItResult * _Nullable))completionBlock;

/**
 *  Using a successful response from the linkBrokerWithAuthenticationInfo:andCompletionBlock: this method will save basic information to the user preferences, and a UUID pointed to the actual user token which will be stored in the keychain.
 */
- (TradeItLinkedLogin * _Nullable)saveToKeychainWithLink:(TradeItAuthLinkResult * _Nullable)link
                                              withBroker:(NSString * _Nullable)broker;

/**
 *  Same as above, but with a custom label. Useful if allowing users to link to more than one login per broker. The default, in the above method, is just the broker name.
 */
- (TradeItLinkedLogin * _Nullable)saveToKeychainWithLink:(TradeItAuthLinkResult * _Nullable)link
                                              withBroker:(NSString * _Nullable)broker
                                                andLabel:(NSString * _Nullable)label;

- (TradeItLinkedLogin * _Nullable)saveToKeychainWithUserId:(NSString * _Nullable)userId
                                              andUserToken:(NSString * _Nullable)userToken
                                                 andBroker:(NSString * _Nullable)broker
                                                  andLabel:(NSString * _Nullable)label;

/**
 *  Using a successful response from the updateUserToken:withAuthenticationInfo:andCompletionBlock: this method will update the keychain token for an already linked account.
 */
- (TradeItLinkedLogin * _Nullable)updateKeychainWithLink:(TradeItAuthLinkResult * _Nullable)link
                                              withBroker:(NSString * _Nullable)broker;

/**
 *  Retrieve a list of stored linkedLogins
 * @return an Array of TradeItLinkedLogin
 */
- (NSArray * _Nullable)getLinkedLogins;

/**
 *  Exchange the keychainId for the userToken associated with it.
 *  This is the last chance to protect the user, retrieving this token should be protected by a pin, password or touchId.
 *
 *  @return token, to establish a session with the associated user and broker
 */
- (NSString * _Nullable)userTokenFromKeychainId:(NSString * _Nullable)keychainId;

/**
 *  Used to unlink the linked account. Should be exposed to the user via the app settings.
 */
- (void)unlinkBroker:(NSString * _Nullable)broker;

- (void)unlinkLogin:(TradeItLinkedLogin * _Nullable)login;

/**
 *  Method used by the session and services to issue requests to the ems servers
 *  You shouldn't need to call this method directly
 */
- (void)sendEMSRequest:(NSMutableURLRequest * _Nullable)request
   withCompletionBlock:(void (^ _Nullable)(TradeItResult * _Nullable, NSMutableString * _Nullable))completionBlock;

- (void)getOAuthLoginPopupUrlForMobileWithBroker:(NSString * _Nonnull)broker
                                oAuthCallbackUrl:(NSURL * _Nonnull)oAuthCallbackUrl
                                 completionBlock:(void (^ _Nonnull)(TradeItResult * _Nullable))completionBlock;

- (void)getOAuthLoginPopupURLForTokenUpdateWithBroker:(NSString * _Nonnull)broker
                                               userId:(NSString * _Nonnull)userId
                                     oAuthCallbackUrl:(NSURL * _Nonnull)oAuthCallbackUrl
                                      completionBlock:(void (^ _Nonnull)(TradeItResult * _Nullable))completionBlock;

- (void)getOAuthAccessTokenWithOAuthVerifier:(NSString * _Nullable)oAuthVerifier
                             completionBlock:(void (^ _Nullable)(TradeItResult * _Nullable))completionBlock;

@end
